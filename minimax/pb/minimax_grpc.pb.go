// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MinimaxClient is the leader API for Minimax service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinimaxClient interface {
	GetExpansion(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (Minimax_GetExpansionClient, error)
	GetEvaluation(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*EvaluateReply, error)
	RequestCancellation(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelAck, error)
}

type minimaxClient struct {
	cc grpc.ClientConnInterface
}

func NewMinimaxClient(cc grpc.ClientConnInterface) MinimaxClient {
	return &minimaxClient{cc}
}

func (c *minimaxClient) GetExpansion(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (Minimax_GetExpansionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Minimax_serviceDesc.Streams[0], "/follower.Minimax/GetExpansion", opts...)
	if err != nil {
		return nil, err
	}
	x := &minimaxGetExpansionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Minimax_GetExpansionClient interface {
	Recv() (*ExpandReply, error)
	grpc.ClientStream
}

type minimaxGetExpansionClient struct {
	grpc.ClientStream
}

func (x *minimaxGetExpansionClient) Recv() (*ExpandReply, error) {
	m := new(ExpandReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *minimaxClient) GetEvaluation(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*EvaluateReply, error) {
	out := new(EvaluateReply)
	err := c.cc.Invoke(ctx, "/follower.Minimax/GetEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minimaxClient) RequestCancellation(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelAck, error) {
	out := new(CancelAck)
	err := c.cc.Invoke(ctx, "/follower.Minimax/RequestCancellation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinimaxServer is the follower API for Minimax service.
// All implementations must embed UnimplementedMinimaxServer
// for forward compatibility
type MinimaxServer interface {
	GetExpansion(*ExpandRequest, Minimax_GetExpansionServer) error
	GetEvaluation(context.Context, *EvaluateRequest) (*EvaluateReply, error)
	RequestCancellation(context.Context, *CancelRequest) (*CancelAck, error)
	mustEmbedUnimplementedMinimaxServer()
}

// UnimplementedMinimaxServer must be embedded to have forward compatible implementations.
type UnimplementedMinimaxServer struct {
}

func (*UnimplementedMinimaxServer) GetExpansion(*ExpandRequest, Minimax_GetExpansionServer) error {
	return status.Errorf(codes.Unimplemented, "method GetExpansion not implemented")
}
func (*UnimplementedMinimaxServer) GetEvaluation(context.Context, *EvaluateRequest) (*EvaluateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluation not implemented")
}
func (*UnimplementedMinimaxServer) RequestCancellation(context.Context, *CancelRequest) (*CancelAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCancellation not implemented")
}
func (*UnimplementedMinimaxServer) mustEmbedUnimplementedMinimaxServer() {}

func RegisterMinimaxServer(s *grpc.Server, srv MinimaxServer) {
	s.RegisterService(&_Minimax_serviceDesc, srv)
}

func _Minimax_GetExpansion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExpandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MinimaxServer).GetExpansion(m, &minimaxGetExpansionServer{stream})
}

type Minimax_GetExpansionServer interface {
	Send(*ExpandReply) error
	grpc.ServerStream
}

type minimaxGetExpansionServer struct {
	grpc.ServerStream
}

func (x *minimaxGetExpansionServer) Send(m *ExpandReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Minimax_GetEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinimaxServer).GetEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follower.Minimax/GetEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinimaxServer).GetEvaluation(ctx, req.(*EvaluateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minimax_RequestCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinimaxServer).RequestCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/follower.Minimax/RequestCancellation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinimaxServer).RequestCancellation(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Minimax_serviceDesc = grpc.ServiceDesc{
	ServiceName: "follower.Minimax",
	HandlerType: (*MinimaxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvaluation",
			Handler:    _Minimax_GetEvaluation_Handler,
		},
		{
			MethodName: "RequestCancellation",
			Handler:    _Minimax_RequestCancellation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetExpansion",
			Handler:       _Minimax_GetExpansion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minimax.proto",
}
